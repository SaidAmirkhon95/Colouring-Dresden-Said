version: '3.8'  # Specify the version of the Docker Compose file format

services:  # Define the services
  postgres:
    image: postgres:12  # Use the official PostgreSQL 12 image
    container_name: dresden-postgres
    restart: always
    environment:
      POSTGRES_USER: ${PGUSER}  # Use environment variables
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - dresden-volume:/var/lib/postgresql/data  # Persistent data volume
      - ./migrations:/migrations
      - ./run_migrations.sh:/run_migrations.sh  
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PGUSER}"]  # Check if the DB is ready
      interval: 5s
      retries: 5
    ports:
      - 5432:5432
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2GB
        reservations:
          cpus: "2"
          memory: 2GB
    networks:
      - dresden_core

  adminer:
    image: adminer:4.8.1
    container_name: dresden-adminer
    restart: always
    ports:
      - 8077:8080
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1GB
        reservations:
          cpus: "1"
          memory: "1GB"
    networks:
      - dresden_core
    volumes:
      - ./uploads.ini:/etc/php/7.4/cli/conf.d/uploads.ini

  komdatis_customer_be:
    image: container-registry.gitlab.cc-asp.fraunhofer.de/steinert1/komdatis/customer-be:0.1.2
    container_name: komdatis-customer-be
    restart: always
    environment:
      NODE_ENV: dev
      PORT: 3001
      SESSION_SECRET: pOQE2Vpl7Hqi06PzJAHuDb3B42PRPIIG
      INIT_CONNECTOR: "false"
      FRONTEND_URL: "http://localhost:8080"
      CUSTOMER_DB_URI: "mongodb+srv://michaelsteinert:Kj2hTEHnIxeZmvJ6@komdatis.pqjrpij.mongodb.net/?retryWrites=true&w=majority"
      PRIVATE_KEY_PATH: private-keys/private-key.pem
      REGISTRATION_SERVICE_URL: "http://host.docker.internal:8184/api/authority/registry"
      CERTIFICATE_API_BASE_URL: http://localhost:39191/api
      AGGREGATION_API_BASE_URL: "http://host.docker.internal:49191/api" 
      AGGREGATION_PROVIDER_BASE_URL: http://localhost:3004
    ports:
      - "3003:3001"
    networks:
      - dresden_core

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: dresden-keycloak
    depends_on:
      - postgres
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://dresden-postgres/${PGDATABASE}
      KC_DB_USERNAME: ${PGUSER}
      KC_DB_PASSWORD: ${PGPASSWORD}
    ports:
      - 8080:8080
    volumes:
      - ./app/src/keycloak/dresden-realm.json:/opt/keycloak/data/import/dresden-realm.json  # Mount realm configuration file
    command: ["start-dev"]
    networks:
      - dresden_core


volumes:
  dresden-volume:
    name: dresden-volume
  keycloak-db-volume:
    name: keycloak-db-volume

networks:
  dresden_core:
    name: dresden_core
